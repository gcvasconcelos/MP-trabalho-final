\hypertarget{common_8cpp}{}\section{common.\+cpp File Reference}
\label{common_8cpp}\index{common.\+cpp@{common.\+cpp}}
{\ttfamily \#include $<$string$>$}\\*
{\ttfamily \#include $<$ncurses.\+h$>$}\\*
{\ttfamily \#include $<$iostream$>$}\\*
{\ttfamily \#include $<$string.\+h$>$}\\*
Include dependency graph for common.\+cpp\+:
% FIG 0
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
void \hyperlink{common_8cpp_a9458c9710ffbba1ffda33188014f880b}{escreve} (std\+::string texto)
\begin{DoxyCompactList}\small\item\em Copia a string do C++ para um ponteiro de char do C.  c\+String é o ponteiro para char com o tamanho suficiente para receber os caracteres da string.  str é a string no formato de string do C++. \end{DoxyCompactList}\item 
void \hyperlink{common_8cpp_ae653ccc06f9f1d2d496a4647044b6fdd}{escreve} (std\+::string texto1, std\+::string texto2)
\begin{DoxyCompactList}\small\item\em Mostra na tela duas variaveis inseridas pelo usuário.  texto1 é a primeira informação que se deseja printar na tela.  texto2 é a segunda informação que se deseja printar na tela. \end{DoxyCompactList}\item 
void \hyperlink{common_8cpp_aa72101738c0e60833b1dfc308894a279}{escreve} (std\+::string texto1, std\+::string texto2, std\+::string texto3)
\begin{DoxyCompactList}\small\item\em Mostra na tela três variaveis inseridas pelo usuário.  texto1 é a primeira informação que se deseja printar na tela.  texto2 é a segunda informação que se deseja printar na tela.  texto3 é a terceira informação que se deseja printar na tela. \end{DoxyCompactList}\item 
int \hyperlink{common_8cpp_a54d5d5886f613409fa76d15384901d97}{length} (const char $\ast$input)
\begin{DoxyCompactList}\small\item\em Função para calcular tamanho de um string constante do C.  input é a string que se quer calcular o tamanho . \end{DoxyCompactList}\end{DoxyCompactItemize}


\subsection{Function Documentation}
\index{common.\+cpp@{common.\+cpp}!escreve@{escreve}}
\index{escreve@{escreve}!common.\+cpp@{common.\+cpp}}
\subsubsection[{\texorpdfstring{escreve(std\+::string texto)}{escreve(std::string texto)}}]{\setlength{\rightskip}{0pt plus 5cm}void escreve (
\begin{DoxyParamCaption}
\item[{std\+::string}]{texto}
\end{DoxyParamCaption}
)}\hypertarget{common_8cpp_a9458c9710ffbba1ffda33188014f880b}{}\label{common_8cpp_a9458c9710ffbba1ffda33188014f880b}


Copia a string do C++ para um ponteiro de char do C.  c\+String é o ponteiro para char com o tamanho suficiente para receber os caracteres da string.  str é a string no formato de string do C++. 

printa na tela

Módulo de funções de uso comum ao todo o código. Bibliotecas utilizadas do C e C++.$<$ manipulação de strings. $<$ interface grafica. $<$ ler e escrever na tela para o C++. ler e escrever na tela para o C. \begin{DoxyReturn}{Returns}
Void. Retorna o ponteiro pra char por referência. Mostrar na tela a variavel inserida pelo usuario. A função foi criada utilizando a técnica de sobreposição de argumentos da função. O sistema detecta com quantos argumentos a função foi chamada e escolhe a que se encaixa.  texto é a informação que se deseja printar na tela. 

Void. 
\end{DoxyReturn}
\index{common.\+cpp@{common.\+cpp}!escreve@{escreve}}
\index{escreve@{escreve}!common.\+cpp@{common.\+cpp}}
\subsubsection[{\texorpdfstring{escreve(std\+::string texto1, std\+::string texto2)}{escreve(std::string texto1, std::string texto2)}}]{\setlength{\rightskip}{0pt plus 5cm}void escreve (
\begin{DoxyParamCaption}
\item[{std\+::string}]{texto1, }
\item[{std\+::string}]{texto2}
\end{DoxyParamCaption}
)}\hypertarget{common_8cpp_ae653ccc06f9f1d2d496a4647044b6fdd}{}\label{common_8cpp_ae653ccc06f9f1d2d496a4647044b6fdd}


Mostra na tela duas variaveis inseridas pelo usuário.  texto1 é a primeira informação que se deseja printar na tela.  texto2 é a segunda informação que se deseja printar na tela. 

\begin{DoxyReturn}{Returns}
Void. 
\end{DoxyReturn}
\index{common.\+cpp@{common.\+cpp}!escreve@{escreve}}
\index{escreve@{escreve}!common.\+cpp@{common.\+cpp}}
\subsubsection[{\texorpdfstring{escreve(std\+::string texto1, std\+::string texto2, std\+::string texto3)}{escreve(std::string texto1, std::string texto2, std::string texto3)}}]{\setlength{\rightskip}{0pt plus 5cm}void escreve (
\begin{DoxyParamCaption}
\item[{std\+::string}]{texto1, }
\item[{std\+::string}]{texto2, }
\item[{std\+::string}]{texto3}
\end{DoxyParamCaption}
)}\hypertarget{common_8cpp_aa72101738c0e60833b1dfc308894a279}{}\label{common_8cpp_aa72101738c0e60833b1dfc308894a279}


Mostra na tela três variaveis inseridas pelo usuário.  texto1 é a primeira informação que se deseja printar na tela.  texto2 é a segunda informação que se deseja printar na tela.  texto3 é a terceira informação que se deseja printar na tela. 

\begin{DoxyReturn}{Returns}
Void. 
\end{DoxyReturn}
\index{common.\+cpp@{common.\+cpp}!length@{length}}
\index{length@{length}!common.\+cpp@{common.\+cpp}}
\subsubsection[{\texorpdfstring{length(const char $\ast$input)}{length(const char *input)}}]{\setlength{\rightskip}{0pt plus 5cm}int length (
\begin{DoxyParamCaption}
\item[{const char $\ast$}]{input}
\end{DoxyParamCaption}
)}\hypertarget{common_8cpp_a54d5d5886f613409fa76d15384901d97}{}\label{common_8cpp_a54d5d5886f613409fa76d15384901d97}


Função para calcular tamanho de um string constante do C.  input é a string que se quer calcular o tamanho . 

tamanho da string

\begin{DoxyReturn}{Returns}
Tamanho da string. 
\end{DoxyReturn}
$<$ const char$\ast$ to String

$<$ tamanho da string 